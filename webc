#!/bin/bash
source "/usr/lib/emsdk/emsdk_env.sh" > /dev/null 2>&1

FILE="$(pwd)/$2"

# web dirs
WEB_DIR=$(dirname "$FILE")
WEB_OUT="$WEB_DIR/output/web"

# win dirs
WIN_DIR=$(dirname "$FILE")
WIN_OUT="$WIN_DIR/output/win"

# linux dirs
TUX_DIR=$(dirname "$FILE")
TUX_OUT="$TUX_DIR/output/linux"

# help menu
function help(){
     echo """
    Usage: 
        webc [OPTIONS] [FILE]

    Options:
        -p
            preload file (eg: sprite, audio, etc)
        -w
            combile for web (WASM)
        -c 
            combile for linux (ELF).
        -m
            combile for windows (EXE)
        -a 
            combile for all (ELF, EXE, WASM)
        -d
            clear all binary

    Example:
        webc -c -m -w -p assets pong/main.cpp
    """
}

# create webpage
function Page(){
    DIR=$(ls -d */*/web)
    gen() {
        PAGE_DIR=./index.html
        touch $PAGE_DIR
        echo "<!DOCTYPE html>
        <html lang=\"en\">

        <head>
        <meta charset=\"utf-8\"/>
        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />
        <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/>
        <title>Programs</title>
        </head>

        <body>

        <h1>MY GAMES</h1>" > $PAGE_DIR

        echo -e "\n <ul>
        " >> $PAGE_DIR

        for i in $DIR; do
            dir_name=$(echo $i | cut -d'/' -f1)
            echo "<li><a href=\"$i\"/>$dir_name</a></li><br>" >> $PAGE_DIR
        done

        echo -e "\n</ul>

        </body>" >> $PAGE_DIR
    }

    if [[ $1 == "-v" ]]; then
    echo "Current Generated Tags"
    echo "-----------------------"
    for i in $DIR; do
        echo "<li><a href=\"$i\"/>$i</a></li><br>"
    done
    echo "-----------------------"
    gen
    else
    gen
    fi

    }

# function for combile based on platforms

function Win()
{
    [[ ! -d $WIN_OUT ]] && mkdir -p "$WIN_OUT"

     x86_64-w64-mingw32-g++ \
        $FILE \
        -o $WIN_OUT/run.exe \
        -lraylib -lgdi32 -lwinmm \
	-I . -I ./dep/include/win/ \
	-L ./dep/lib/win/ \
     	-static
}

function Web()
{
    [[ ! -d $WEB_OUT ]] && mkdir -p "$WEB_OUT"

     emcc \
        $FILE \
        -o $WEB_OUT/index.html \
        -Wall -std=c++14 -D_DEFAULT_SOURCE \
        -Wno-missing-braces -Wunused-result \
        -Os -I. \
        -I ./dep/include/web/ \
        -s USE_GLFW=3 -s ASYNCIFY \
        -s TOTAL_MEMORY=67108864 \
        -s FORCE_FILESYSTEM=1 \
        --shell-file ./dep/include/web/minshell.html \
        ./dep/lib/web/libraylib.a \
        -DPLATFORM_WEB -s 'EXPORTED_FUNCTIONS=["_free","_malloc","_main"]' \
        -s EXPORTED_RUNTIME_METHODS=ccall \
        #--preload-file dasher/assets/
}

function Tux()
{
    [[ ! -d $TUX_OUT ]] && mkdir -p "$TUX_OUT"

    g++ \
        $FILE \
        -o $TUX_OUT/run \
        -g -L./dep/lib/linux/ -Wl,-Bstatic -lraylib -Wl,-Bdynamic -lGL \
        -lm -lpthread \
        -ldl -lrt \
        -lX11
}

function Cbin(){
    for delete in $(find . -name "output" -type d);do 
        rm -rf $delete
    done
}

if [[ -z $1 ]]; then
    help

else
    while getopts ":p:c:w:m:a:db" opt; do
        case $opt in
            p)
                preload_file=$OPTARG
                ;;
            w)
                Web
                ;;
            c)
                Tux
                ;;
            m)
                Win
                ;;
            a)
                Web
                Tux
                Win
                ;;
            d)
                Cbin
                ;;
	    b)
		Page
		;;
            \?)
                echo "Invalid option: -$OPTARG" >&2
                help
                ;;
            :)
                echo "Option -$OPTARG requires an argument." >&2
                help
                ;;
        esac
    done    
fi
